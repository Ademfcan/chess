/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chessengine;

import chessserver.FrontendClient;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;

import javax.websocket.DeploymentException;
import java.io.*;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class App extends Application {

    public static mainScreenController mainScreenController;
    public static StartScreenController startScreenController;

    public static SoundPlayer soundPlayer;
    private final static String startUrl = "/FxmlFiles/StartScreen.fxml";
    private final static String mainUrl = "/FxmlFiles/MainScreen.fxml";

    private final static String startCss = "/CSSFiles/StartScreenCss.css";
    private final static String mainCss = "/CSSFiles/MainScreenCss.css";

    private final static String appdataPathGameSaves = System.getenv("APPDATA") + "/Chess/save.txt";
    private final static String appdataPathUserSaves = System.getenv("APPDATA") + "/Chess/user.txt";
    private final static String appdataFolder = System.getenv("APPDATA") + "/Chess";
    private static Stage mainStage;

    private static Scene mainScene;
    private static Parent startRoot;
    private static Parent mainRoot;

    private static boolean isStartScreen;

    public static ThemesGlobal globalTheme;

    public static FrontendClient appUser;

    public static WebSocketClient getWebclient() {
        return webclient;
    }


    public static WebSocketClient webclient;

    public static void updateGlobalTheme(ThemesGlobal newTheme){
        globalTheme = newTheme;
        mainScene.getStylesheets().clear();
        mainScene.getStylesheets().add(globalTheme.cssLocation);
        mainScene.getStylesheets().add(isStartScreen ? startCss : mainCss);

    }




    private static ChessCentralControl ChessCentralControl;


    public static ChessCentralControl getCentralControl() {
        return ChessCentralControl;
    }

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args){
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        appUser = readUserFromSave();
        if(Objects.isNull(appUser)){
            appUser = ChessConstants.defaultClient;
        }
        try {
            webclient = new WebSocketClient(appUser);
        }
        catch (DeploymentException e){
            System.out.println("No connection to server!");
        }
        catch (IOException e){
            System.out.println(e.getMessage());
        }
        soundPlayer = new SoundPlayer();
        soundPlayer.startBackgroundMusic();

        ChessCentralControl = new ChessCentralControl();
        mainStage = primaryStage;
        try {

            FXMLLoader fxmlLoader2 = new FXMLLoader(App.class.getResource(startUrl));
            fxmlLoader2.setControllerFactory(c -> setStartScreenController()); // Set controller factory
            startRoot = fxmlLoader2.load();
            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(mainUrl));
            fxmlLoader.setControllerFactory(c -> setMainScreenController()); // Set controller factory
            mainRoot = fxmlLoader.load();


        } catch (IOException e) {
            e.printStackTrace();
        }
        mainScene = new Scene(startRoot);
        isStartScreen = true;
        updateGlobalTheme(ThemesGlobal.Light);
        primaryStage.setOnCloseRequest(e->{
            mainScreenController.endAsync();

        });


        primaryStage.setScene(mainScene);
        primaryStage.show();
        primaryStage.getIcons().add(new Image("/appIcon/icon.png"));



    }

    public static void changeClient(String newName, int elo){
        appUser = new FrontendClient(newName,elo);
        writeUserToSave(appUser);
        try {
            webclient = new WebSocketClient(appUser);
        }
        catch (DeploymentException e){
            System.out.println("No connection to server!");
        }
        catch (IOException e){
            System.out.println(e.getMessage());
        }
    }

    @Override
    public void stop(){
        mainScreenController.endAsync();
    }


    private mainScreenController setMainScreenController(){
        mainScreenController = new mainScreenController();
        return mainScreenController;
    }

    private StartScreenController setStartScreenController(){
        startScreenController = new StartScreenController();
        return startScreenController;
    }

    public static void changeToStart(){
        isStartScreen = true;
        mainScene.setRoot(startRoot);
        updateGlobalTheme(globalTheme);
        soundPlayer.startBackgroundMusic();


    }

    public static void changeToMainScreenWithoutAny(String gameName, boolean isVsComputer,MainScreenState state){
        isStartScreen = false;
        mainScene.setRoot(mainRoot);
        updateGlobalTheme(globalTheme);
        mainScreenController.setUp(isVsComputer,gameName,null,appUser.getName(), appUser.getElo(),state);
        soundPlayer.stopMusic();

    }



    public static void changeToMainScreenWithGame(ChessGame loadedGame,boolean isVsComputer,MainScreenState state){
        isStartScreen = false;
        mainScene.setRoot(mainRoot);
        updateGlobalTheme(globalTheme);
        mainScreenController.setUp(isVsComputer,"",loadedGame,appUser.getName(), appUser.getElo(),state);
        soundPlayer.stopMusic();


    }

    public static void changeToMainScreenMultiplayer(String player1Name, int player1Elo, ChessGame webGame){
        soundPlayer.stopMusic();

    }



    // user save related

    public static FrontendClient readUserFromSave(){
        FrontendClient client = null;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(appdataPathUserSaves));
            String line = reader.readLine();
            String[] split = line.split(",");
            String name = split[0];
            int elo = Integer.parseInt(split[1]);
            client = new FrontendClient(name,elo);
            reader.close();
        }
        catch (FileNotFoundException e){
            ChessConstants.mainLogger.debug("No save data, creating a folder as: " + System.getenv("APPDATA") + "/Chess)");
            File directory = new File(appdataFolder);
            directory.mkdirs();


        }
        catch (SecurityException e){
            ChessConstants.mainLogger.error("No permission to create a file! Path: " + appdataPathUserSaves);
        }
        catch (Exception e){
            ChessConstants.mainLogger.error("Error reading user from AppData: " + e.getMessage());
            e.printStackTrace();
        }
        return client;
    }

    public static void writeUserToSave(FrontendClient client){
        try {
            FileWriter writer = new FileWriter(appdataPathUserSaves,false);
            writer.write(client.getName() + "," + client.getElo());
            writer.close();
        }
        catch (FileNotFoundException e){
            ChessConstants.mainLogger.debug("No save data, creating a folder as: " + System.getenv("APPDATA") + "/Chess)");
            File directory = new File(appdataFolder);
            directory.mkdirs();


        }
        catch (SecurityException e){
            ChessConstants.mainLogger.error("No permission to create a file! Path: " + appdataPathUserSaves);
        }
        catch (Exception e){
            ChessConstants.mainLogger.error("Error writing user to AppData: " + e.getMessage());
            e.printStackTrace();
        }
    }



    // game save related

    public static List<ChessGame> readFromAppData(){
        List<ChessGame> games = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(appdataPathGameSaves));
            String line;
            while ((line = reader.readLine()) != null) {
                // Check if the line contains the data to remove
                String[] split = line.split(",");
                Arrays.stream(split).forEach(s -> s = s.trim());
                // index 0 = hashcode 1 = name 2 = player1 name 3 = player2 name 4 = player1 elo 5 = player2 elo 6 = game pgn 7 = isvsComputer
                games.add(new ChessGame(split[6],split[1],split[2],split[3],Integer.parseInt(split[4]),Integer.parseInt(split[5]),Boolean.parseBoolean(split[7]),split[0]));
            }
            reader.close();
        }
        catch (FileNotFoundException e){
            ChessConstants.mainLogger.debug("No save data, creating a folder as: " + System.getenv("APPDATA") + "/Chess)");
            File directory = new File(appdataFolder);
            directory.mkdirs();


        }
        catch (SecurityException e){
            ChessConstants.mainLogger.error("No permission to create a file! Path: " + appdataPathGameSaves);
        }
        catch (Exception e){
            ChessConstants.mainLogger.error("Error reading game from AppData: " + e.getMessage());
            e.printStackTrace();
        }
        return games;

    }

    public static void removeGameFromData(String gameHash){
        try {
            // read in all games that are not the one we want to remove
            BufferedReader reader = new BufferedReader(new FileReader(appdataPathGameSaves));
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                // Check if the line contains the data to remove
                String hash = line.split(",")[0];
                System.out.println(hash);
                System.out.println(gameHash);
                if (!hash.trim().equals(gameHash)) {
                    // Append the line to the StringBuilder if it doesn't contain the data to remove
                    stringBuilder.append(line).append("\n");
                }
                else{
                    ChessConstants.mainLogger.debug("Removing line" + line);

                }
            }
            reader.close();

            // then put all the games we want back in the file
            BufferedWriter writer = new BufferedWriter(new FileWriter(appdataPathGameSaves, false));
            writer.write(stringBuilder.toString());
            writer.close();

        }
        catch (Exception e){
            ChessConstants.mainLogger.error("Error removing game from AppData: " + e.getMessage());
        }
    }

    public static void writeToAppData( List<ChessGame> content,boolean isAppend){

        try {
            // Open the file in append mode
            BufferedWriter writer = new BufferedWriter(new FileWriter(appdataPathGameSaves, isAppend));
            for(ChessGame game : content){
                writer.write(game.hashCode() + "," + game.getGameName() + "," + game.getPlayer1name() + "," + game.getPlayer2name() + "," + game.getPlayer1Elo() + "," + game.getPlayer2Elo() + "," + game.gameToPgn() + "," + game.isVsComputer() + "\n");
            }
            // Write content to the file

            // Close the writer
            writer.close();

            ChessConstants.mainLogger.debug("Content written to the file successfully. Location: " + appdataPathGameSaves);
        } catch (IOException e) {
            ChessConstants.mainLogger.error("Error removing game from AppData: " + e.getMessage());
        }
    }

    public static void appendGameToAppData(ChessGame game){
        try {
            // Open the file in append mode
            BufferedWriter writer = new BufferedWriter(new FileWriter(appdataPathGameSaves, true));
            writer.write(game.hashCode() + "," + game.getGameName() + "," + game.getPlayer1name() + "," + game.getPlayer2name() + "," + game.getPlayer1Elo() + "," + game.getPlayer2Elo() + "," + game.gameToPgn() + "," + game.isVsComputer() + "\n");
            // Write content to the file

            // Close the writer
            writer.close();

            ChessConstants.mainLogger.debug("Content appended to the file successfully. Location: " + appdataPathGameSaves);
        } catch (IOException e) {
            ChessConstants.mainLogger.error("Error appending game to AppData: " + e.getMessage());
        }
    }




}
