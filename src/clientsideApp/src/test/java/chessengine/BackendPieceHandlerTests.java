///*
// * This Java source file was generated by the Gradle 'init' task.
// */
//package chessengine;
//
//import org.junit.jupiter.api.Assertions;
//import org.junit.jupiter.api.Test;
//
//class BackendPieceHandlerTests {
//    @Test void testSimpleKingMoves() {
//        AdvancedChessFunctions handler = new AdvancedChessFunctions();
//        // index 5 = king
//        handler.movePiece(true,4,7,4,5,false,false,handler.realBoard);
//        // check that white piece is moved to new location correctly
//        Assertions.assertEquals(handler.getPieceType(4,5,true,handler.realBoard),"King");
//        handler.movePiece(false,4,0,4,4,false,false,handler.realBoard);
//        // check that black piece is also moved properly
//        Assertions.assertEquals(handler.getPieceType(4,4,false,handler.realBoard),"King");
//
//        // verify king coordinates have been updated properly
//        XYcoord whiteKingCoord = handler.realBoard.getWhiteKingLocation();
//        XYcoord blackKingCoord = handler.realBoard.getBlackKingLocation();
//        Assertions.assertEquals(whiteKingCoord,new XYcoord(4,5));
//        Assertions.assertEquals(blackKingCoord,new XYcoord(4,4));
//
//    }
//
//    @Test void testPiecesProperInit(){
//        AdvancedChessFunctions handler = new AdvancedChessFunctions();
//        // test that boardwrapper object is created correctly
//        long[] initWhite = handler.realBoard.getWhitePieces();
//        long[] initBlack = handler.realBoard.getBlackPieces();
//
//        long[] expectedWhite = handler.whitePiecesC;
//        long[] expectedBlack = handler.blackPiecesC;
//
//        for(int i = 0; i< initWhite.length;i++){
//            Assertions.assertEquals(initWhite[i],expectedWhite[i]);
//            Assertions.assertEquals(initBlack[i],expectedBlack[i]);
//        }
//
//    }
//
//    @Test void testChangeBoard(){
//        AdvancedChessFunctions handler = new AdvancedChessFunctions();
//        // checking if the function to move back and forth between moves is working
//        // move white king
//        handler.movePiece(true,4,7,4,5,false,false,handler.realBoard);
//        // move black pawn
//        handler.movePiece(false,7,1,7,3,false,false,handler.realBoard);
//        // eat white queen with black queen
//        handler.movePiece(false,3,0,3,7,true,false,handler.realBoard);
//        handler.removePeice(true, 3, 7, true, handler.realBoard,false);
//
//        // check moved pieces
//        Assertions.assertEquals(handler.getPieceType(4,5,true,handler.realBoard),"King");
//        Assertions.assertEquals(handler.getPieceType(7,3,false,handler.realBoard),"Pawn");
//        Assertions.assertEquals(handler.getPieceType(3,7,false,handler.realBoard),"Queen");
//
//        // move back to starting board
//        // istest flag to not update the nonexistent gui
//        // moveindex starts at -1
//        Assertions.assertEquals(handler.moveIndx,2);
//        handler.updateMoveIndex(-3);
//        handler.ChangeBoard(false,handler.realBoard,true);
//        // check that all pieces are at starting positions
//        // check white queen got uneaten
//        Assertions.assertEquals(handler.getPieceType(4,7,true,handler.realBoard),"King");
//        Assertions.assertEquals(handler.getPieceType(7,1,false,handler.realBoard),"Pawn");
//        Assertions.assertEquals(handler.getPieceType(3,0,false,handler.realBoard),"Queen");
//        Assertions.assertEquals(handler.getPieceType(3,7,true,handler.realBoard),"Queen");
//
//    }
//
//
//
//}
